---
name: Build

on:
  push:
    branches:
      - master
      - "bugfix-release/*"
      - "release/*"
  pull_request:
  workflow_dispatch:
  merge_group:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  C2_ENABLE_LTO: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/bugfix-release/') || startsWith(github.ref, 'refs/heads/release/') }}
  CHATTERINO_REQUIRE_CLEAN_GIT: On
  CONAN_VERSION: 2.11.0

jobs:
  build-ubuntu-docker:
    # Our Ubuntu builds are built using Docker images that have been pre-published.
    # This speeds up builds for us since we do some pre-building of packages that takes a long time
    # However, this means if you need to add a dependency to the build, you'll need to do that
    # in the https://github.com/Chatterino/docker repository first.
    name: "Build Ubuntu in Docker"
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            container: ghcr.io/chatterino/chatterino2-build-ubuntu-22.04:latest
            qt-version: 6.7.2
            force-lto: false
            skip-artifact: false
            skip-crashpad: false
            build-appimage: true
            build-deb: true
          - os: ubuntu-24.04
            container: ghcr.io/chatterino/chatterino2-build-ubuntu-24.04:latest
            qt-version: 6.7.2
            force-lto: false
            skip-artifact: false
            skip-crashpad: false
            build-appimage: false
            build-deb: true
    env:
      C2_ENABLE_LTO: ${{ matrix.force-lto }}
      C2_ENABLE_CRASHPAD: ${{ matrix.skip-crashpad == false }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # allows for tags access

      - name: Fix git permission error
        run: |
          git config --global --add safe.directory '*'

      - name: Install Python and libclang (24.04)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt -y --no-install-recommends install \
            python3 python3-venv clang-18 clang-format-18 libclang-18-dev
          echo "LIBCLANG_LIBRARY_FILE=/usr/lib/x86_64-linux-gnu/libclang-18.so" >> "$GITHUB_ENV"
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 42
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-18 42

      - name: Build
        run: |
          mkdir build
          cd build
          CXXFLAGS=-fno-sized-deallocation cmake \
            -DCMAKE_INSTALL_PREFIX=appdir/usr/ \
            -DCMAKE_BUILD_TYPE=Release \
            -DPAJLADA_SETTINGS_USE_BOOST_FILESYSTEM=On \
            -DUSE_PRECOMPILED_HEADERS=OFF \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
            -DCHATTERINO_LTO="$C2_ENABLE_LTO" \
            -DCMAKE_PREFIX_PATH="$Qt6_DIR/lib/cmake" \
            -DCHATTERINO_STATIC_QT_BUILD=On \
            -DFORCE_JSON_GENERATION=${{matrix.os == 'ubuntu-24.04' && 'On' || 'Off'}} \
            ..
          make -j"$(nproc)"

      - name: Check generated sources
        if: matrix.os == 'ubuntu-24.04'
        run: |
          git add -N lib/twitch-eventsub-ws/include lib/twitch-eventsub-ws/src
          git --no-pager diff --exit-code lib/twitch-eventsub-ws/include lib/twitch-eventsub-ws/src

      - name: Package - AppImage (Ubuntu)
        if: matrix.build-appimage
        run: |
          cd build
          sh ./../.CI/CreateAppImage.sh

      - name: Upload artifact - AppImage (Ubuntu)
        if: matrix.build-appimage
        uses: actions/upload-artifact@v4
        with:
          name: Bajerino-x86_64-Qt-${{ matrix.qt-version }}.AppImage
          path: build/Bajerino-x86_64.AppImage

      - name: Package - .deb (Ubuntu)
        if: matrix.build-deb
        run: |
          cd build
          sh ./../.CI/CreateUbuntuDeb.sh

      - name: Upload artifact - .deb (Ubuntu)
        if: matrix.build-deb
        uses: actions/upload-artifact@v4
        with:
          name: Bajerino-${{ matrix.os }}-Qt-${{ matrix.qt-version }}.deb
          path: build/Bajerino-${{ matrix.os }}-x86_64.deb

  build:
    name: "Build ${{ matrix.os }}, Qt ${{ matrix.qt-version }} (LTO:${{ matrix.force-lto }}, crashpad:${{ matrix.skip-crashpad && 'off' || 'on' }})"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS
          - os: macos-14
            build-target: "13.0"
            qt-version: 6.7.1
            force-lto: false
            skip-artifact: false
            skip-crashpad: false
          # Windows
          - os: windows-latest
            qt-version: 6.7.1
            force-lto: false
            skip-artifact: false
            skip-crashpad: false

      fail-fast: false
    env:
      C2_ENABLE_LTO: ${{ matrix.force-lto }}
      C2_ENABLE_CRASHPAD: ${{ matrix.skip-crashpad == false }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # allows for tags access

      - name: Install Qt6
        if: startsWith(matrix.qt-version, '6.')
        uses: jurplel/install-qt-action@v4.3.0
        with:
          cache: true
          cache-key-prefix: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}-v2
          modules: qt5compat qtimageformats
          version: ${{ matrix.qt-version }}

      # WINDOWS
      - name: Enable Developer Command Prompt (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Setup sccache (Windows)
        # sccache v0.7.4
        uses: hendrikmuhs/ccache-action@v1.2.18
        if: startsWith(matrix.os, 'windows')
        with:
          variant: sccache
          # only save on on the default (master) branch
          save: ${{ github.event_name == 'push' }}
          key: sccache-build-${{ matrix.os }}-${{ matrix.qt-version }}-${{ matrix.skip-crashpad }}
          restore-keys: |
            sccache-build-${{ matrix.os }}-${{ matrix.qt-version }}

      - name: Cache conan packages (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-conan-user-${{ hashFiles('**/conanfile.py') }}-QT6
          path: ~/.conan2/

      - name: Install Conan (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          python3 -c "import site; import sys; print(f'{site.USER_BASE}\\Python{sys.version_info.major}{sys.version_info.minor}\\Scripts')" >> "$GITHUB_PATH"
          pip3 install --user "conan==${{ env.CONAN_VERSION }}"
        shell: powershell

      - name: Setup Conan (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          conan --version
          conan profile detect -f
        shell: powershell

      - name: Install dependencies (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          mkdir build
          cd build
          conan install .. `
              -s build_type=RelWithDebInfo `
              -c tools.cmake.cmaketoolchain:generator="NMake Makefiles" `
              -b missing `
              --output-folder=. `
              -o with_openssl3="True"
        shell: powershell

      - name: Build (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          cd build
          cmake `
              -G"NMake Makefiles" `
              -DCMAKE_BUILD_TYPE=RelWithDebInfo `
              -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake" `
              -DUSE_PRECOMPILED_HEADERS=ON `
              -DBUILD_WITH_CRASHPAD="$Env:C2_ENABLE_CRASHPAD" `
              -DCHATTERINO_LTO="$Env:C2_ENABLE_LTO" `
              -DFORCE_JSON_GENERATION=On `
              ..
          set cl=/MP
          nmake /S /NOLOGO

      - name: Build crashpad (Windows)
        if: startsWith(matrix.os, 'windows') && !matrix.skip-crashpad
        shell: pwsh
        run: |
          cd build
          set cl=/MP
          nmake /S /NOLOGO chatterino-crash-handler
          mkdir Bajerino/crashpad
          cp bin/crashpad/crashpad-handler.exe Bajerino/crashpad/crashpad-handler.exe
          7z a bin/bajerino-Qt-${{ matrix.qt-version }}.pdb.7z bin/bajerino.pdb

      - name: Prepare build dir (windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          cd build
          windeployqt bin/bajerino.exe --release --no-compiler-runtime --no-translations --no-opengl-sw --dir Bajerino/
          cp bin/bajerino.exe Bajerino/
          ..\.CI\deploy-crt.ps1 Bajerino

      - name: Package (windows)
        if: startsWith(matrix.os, 'windows')
        working-directory: build
        run: |
          7z a bajerino-windows-x86-64-Qt-${{ matrix.qt-version }}.zip Bajerino/

      - name: Upload artifact (Windows - binary)
        if: startsWith(matrix.os, 'windows') && !matrix.skip-artifact
        uses: actions/upload-artifact@v4
        with:
          name: bajerino-windows-x86-64-Qt-${{ matrix.qt-version }}.zip
          path: build/bajerino-windows-x86-64-Qt-${{ matrix.qt-version }}.zip

      - name: Upload artifact (Windows - symbols)
        if: startsWith(matrix.os, 'windows') && !matrix.skip-artifact
        uses: actions/upload-artifact@v4
        with:
          name: bajerino-windows-x86-64-Qt-${{ matrix.qt-version }}-symbols.pdb.7z
          path: build/bin/bajerino-Qt-${{ matrix.qt-version }}.pdb.7z

      - name: Clean Conan cache
        if: startsWith(matrix.os, 'windows')
        run: conan cache clean --source --build --download "*"
        shell: bash

      # MACOS
      - name: Install dependencies (MacOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          # binary dependencies
          ./.CI/SetupHomebrewDeps.sh boost openssl@3
          # build and header-only dependencies
          brew install rapidjson p7zip create-dmg cmake tree
        shell: bash

      - name: Build (MacOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          mkdir build
          cd build
          cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.build-target }} \
              -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \
              -DUSE_PRECOMPILED_HEADERS=OFF \
              -DCHATTERINO_LTO="$C2_ENABLE_LTO" \
              -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
              -DFORCE_JSON_GENERATION=Off \
              ..
          make -j"$(sysctl -n hw.logicalcpu)"
        shell: bash

      - name: Package (MacOS)
        if: startsWith(matrix.os, 'macos')
        env:
          OUTPUT_DMG_PATH: bajerino-macos-${{ matrix.build-target }}-Qt-${{ matrix.qt-version}}-universal.dmg
        run: |
          ls -la
          pwd
          ls -la build || true
          cd build
          ./../.CI/MacDeploy.sh

          # Copy dynamic library dependencies into the Frameworks directory
          cp /opt/universal-lib/libcrypto.dylib bajerino.app/Contents/Frameworks/libcrypto.3.dylib
          cp /opt/universal-lib/libssl.dylib bajerino.app/Contents/Frameworks/libssl.3.dylib
          # Fix the library IDs to match their new location
          install_name_tool -id @executable_path/../Frameworks/libssl.3.dylib bajerino.app/Contents/Frameworks/libssl.3.dylib
          install_name_tool -id @executable_path/../Frameworks/libcrypto.3.dylib bajerino.app/Contents/Frameworks/libcrypto.3.dylib
          otool -L bajerino.app/Contents/Frameworks/libssl.3.dylib
          # Fix the search path for libcrypto in libssl
          otool -L bajerino.app/Contents/Frameworks/libssl.3.dylib \
            | grep libcrypto.3.dylib \
            | cut -d" " -f1 \
            | cut -f2 \
            | while read input_crypto_dylib; do \
                install_name_tool -change \
                  "$input_crypto_dylib" \
                  @executable_path/../Frameworks/libcrypto.3.dylib \
                  bajerino.app/Contents/Frameworks/libssl.3.dylib; \
              done
          # Fix the search path for lib{crypto,ssl} in bajerino
          otool -L bajerino.app/Contents/MacOS/bajerino \
            | grep /opt \
            | cut -d" " -f1 \
            | cut -f2 \
            | while read og_entry; do \
                echo $og_entry; \
                install_name_tool -change \
                  "$og_entry" \
                  @executable_path/../Frameworks/$(echo $og_entry | sed -E 's/.*(libssl|libcrypto)/\1/') \
                  bajerino.app/Contents/MacOS/bajerino; \
              done

          ./../.CI/CreateDMG.sh
        shell: bash

      - name: Upload artifact (MacOS)
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: bajerino-macos-${{ matrix.build-target }}-Qt-${{ matrix.qt-version}}-universal.dmg
          path: build/bajerino-macos-${{ matrix.build-target }}-Qt-${{ matrix.qt-version}}-universal.dmg

  create-release:
    needs: [build-ubuntu-docker, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/master')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # allows for tags access

      # Windows
      - uses: actions/download-artifact@v4
        name: Windows Qt6.7.1
        with:
          name: bajerino-windows-x86-64-Qt-6.7.1.zip
          path: release-artifacts/

      - uses: actions/download-artifact@v4
        name: Windows Qt6.7.1 symbols
        with:
          name: bajerino-windows-x86-64-Qt-6.7.1-symbols.pdb.7z
          path: release-artifacts/

      # MacOS
      - uses: actions/download-artifact@v4
        name: MacOS Qt6.7.1 Universal
        with:
          name: bajerino-macos-13.0-Qt-6.7.1-universal.dmg
          path: release-artifacts/

      # Linux
      - uses: actions/download-artifact@v4
        name: Linux AppImage
        with:
          name: Bajerino-x86_64-Qt-6.7.2.AppImage
          path: release-artifacts/

      - uses: actions/download-artifact@v4
        name: Ubuntu 22.04 deb
        with:
          name: Bajerino-ubuntu-22.04-Qt-6.7.2.deb
          path: release-artifacts/

      - uses: actions/download-artifact@v4
        name: Ubuntu 24.04 deb
        with:
          name: Bajerino-ubuntu-24.04-Qt-6.7.2.deb
          path: release-artifacts/

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Format changes
        id: format-changes
        run: |
          delimiter=$(openssl rand -hex 32)
          {
            echo "changelog<<$delimiter"
            python3 ./.CI/format-recent-changes.py
            echo $delimiter
          } >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Create release
        uses: ncipollo/release-action@v1.18.0
        with:
          replacesArtifacts: true
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "release-artifacts/*"
          body: ${{ steps.format-changes.outputs.changelog }}
          prerelease: true
          name: Nightly Release
          tag: nightly-build

      - name: Update nightly-build tag
        run: |
          git tag -f nightly-build
          git push -f origin nightly-build
        shell: bash
